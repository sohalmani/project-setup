{"version":3,"sources":["assets/scripts/modules/Queue.js","assets/scripts/modules/Stack.js","assets/scripts/index.js"],"names":["Queue","this","items","enqueue","element","push","dequeue","length","shift","peek","isEmpty","size","clear","Stack","add","remove","pop","let","queue","console","log","stack"],"mappings":";;EAEA,IAAMA,QACJ,SAAAA;IACIC,KAAKC,QAAQ;AACjB;E,gBAGAC,UAAA,SAAAA,QAAQC;IACJ,OAAOH,KAAKC,MAAMG,KAAKD,OAAO;AAClC;E,gBAGAE,UAAA,SAAAA;IACI,IAAGL,KAAKC,MAAMK,SAAS,GAAG;MACtB,OAAON,KAAKC,MAAMM,MAAK;AACjC;AACE;E,gBAGAC,OAAA,SAAAA;IACI,OAAOR,KAAKC,MAAMD,KAAKC,MAAMK,SAAS;AAC1C;E,gBAGAG,UAAA,SAAAA;IACG,OAAOT,KAAKC,MAAMK,UAAU;AAC/B;E,gBAGAI,OAAA,SAAAA;IACI,OAAOV,KAAKC,MAAMK;AACtB;E,gBAGAK,QAAA,SAAAA;IACIX,KAAKC,QAAQ;AACjB;ECnCF,IAAMW,QACJ,SAAAA;IACIZ,KAAKC,QAAQ;AACjB;E,gBAGAY,MAAA,SAAAA,IAAIV;IACA,OAAOH,KAAKC,MAAMG,KAAKD,OAAO;AAClC;E,gBAGAW,SAAA,SAAAA;IACI,IAAGd,KAAKC,MAAMK,SAAS,GAAG;MACtB,OAAON,KAAKC,MAAMc,IAAG;AAC/B;AACE;E,gBAGAP,OAAA,SAAAA;IACI,OAAOR,KAAKC,MAAMD,KAAKC,MAAMK,SAAS;AAC1C;E,gBAGAG,UAAA,SAAAA;IACG,OAAOT,KAAKC,MAAMK,UAAU;AAC/B;E,gBAGAI,OAAA,SAAAA;IACI,OAAOV,KAAKC,MAAMK;AACtB;E,gBAGAK,QAAA,SAAAA;IACIX,KAAKC,QAAQ;AACjB;EClCFe,IFHAC,QAAA,IAAAlB,MAAA;EACAkB,MAAAf,QAAA,CAAA;EEIAe,MFHMf,QACJ,CAAA;EEGFe,MFFMf,QAAK,CAAA;EEGXe,MFFGf,QAAA,CAAA;EEGHgB,QFFAC,IAAAF,MAAAhB,KAAA;EEIAgB,MAAMZ,QAAO;EACba,QFFMC,IAAAF,MAAYhB,KAAK;EEIvBiB,QFFAC,IAAAF,MAAAT,KAAA,CAAA;EEIAU,QAAQC,IAAIF,MFFVR,QAAA,CAAA;EEIFS,QFFAC,IAAUF,MAAOP,KAAK,CAAA;EEItBO,MFFGN,MAAA;EEGHO,QFFAC,IAAAF,MAAAhB,KAAA;EEIAe,IAAII,QAAQ,IAAIR,MFFd;EEGFQ,MFFMP,IAAA,CAAA;EEGNO,MFFGP,IAAA,CAAA;EEGHO,MFFAP,IAAA,CAAA;EEGAO,MFFEP,IAAA,CAAA;EEGFK,QAAQC,IAAIC,MFFVnB,KAAA;EEIFmB,MFFGN,OAAA;EEGHI,QFFAC,IAAAC,MAAAnB,KAAA;EEIAiB,QAAQC,IAAIC,MFFVZ,KAAA,CAAA;A","file":"index.js","sourcesContent":["// program to implement queue data structure\n\nclass Queue {\n  constructor() {\n      this.items = [];\n  }\n  \n  // add element to the queue\n  enqueue(element) {\n      return this.items.push(element);\n  }\n  \n  // remove element from the queue\n  dequeue() {\n      if(this.items.length > 0) {\n          return this.items.shift();\n      }\n  }\n  \n  // view the last element\n  peek() {\n      return this.items[this.items.length - 1];\n  }\n  \n  // check if the queue is empty\n  isEmpty(){\n     return this.items.length == 0;\n  }\n \n  // the size of the queue\n  size(){\n      return this.items.length;\n  }\n\n  // empty the queue\n  clear(){\n      this.items = [];\n  }\n}\n\nexport default Queue;\n","// program to implement stack data structure\n\nclass Stack {\n  constructor() {\n      this.items = [];\n  }\n  \n  // add element to the stack\n  add(element) {\n      return this.items.push(element);\n  }\n  \n  // remove element from the stack\n  remove() {\n      if(this.items.length > 0) {\n          return this.items.pop();\n      }\n  }\n  \n  // view the last element\n  peek() {\n      return this.items[this.items.length - 1];\n  }\n  \n  // check if the stack is empty\n  isEmpty(){\n     return this.items.length == 0;\n  }\n \n  // the size of the stack\n  size(){\n      return this.items.length;\n  }\n\n  // empty the stack\n  clear(){\n      this.items = [];\n  }\n}\n\nexport default Stack;","import Queue from './modules/Queue';\nimport Stack from './modules/Stack';\n\nlet queue = new Queue();\nqueue.enqueue(1);\nqueue.enqueue(2);\nqueue.enqueue(4);\nqueue.enqueue(8);\nconsole.log(queue.items);\n\nqueue.dequeue();\nconsole.log(queue.items);\n\nconsole.log(queue.peek());\n\nconsole.log(queue.isEmpty());\n\nconsole.log(queue.size());\n\nqueue.clear();\nconsole.log(queue.items);\n\nlet stack = new Stack();\nstack.add(1);\nstack.add(2);\nstack.add(4);\nstack.add(8);\nconsole.log(stack.items);\n\nstack.remove();\nconsole.log(stack.items);\n\nconsole.log(stack.peek());\n"],"sourceRoot":"assets/scripts/"}